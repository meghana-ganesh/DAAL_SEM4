//not complete
#include<stdio.h>
#include<stdlib.h>

        boolean partitionPossible(int requiredSum, int currIndex, int[] set)
	    {
	         
	        if (requiredSum == 0)
	        {
	            return true;
	        }
	        
	         
	         
	        if (currIndex == set.length)
	        {
	            return false;
	        }
	        
	         
	        return ( 
	                 partitionPossible(requiredSum-set[currIndex], currIndex+1, set) || 
	                 partitionPossible(requiredSum, currIndex+1, set)
	               );
	    }
	    
	    public boolean partitionExists(int[] set)
	    {
	        int sum = 0;
	        for (int i = 0; i < set.length; i++)
	        {
	            sum += set[i];
	        }
	        
	         
	        if ((sum % 2) != 0)
	        {
	            return false;
	        }
	        
	         
	        return partitionPossible(sum/2, 0, set);
	    }
	    
	    int main()
	    {
	        PartitionProblem solution = new PartitionProblem();
	        
	        int[] set = {15,5,15,20,45};
	        
	        printf(solution.partitionExists(set));
	    }
